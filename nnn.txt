4 omp 
%%writefile addmul.c

#include <stdio.h>
#include <omp.h>

#define SIZE 5

int main() {
    int a[SIZE] = {1,2,3,4,5};
    int b[SIZE] = {5,4,3,2,1};
    int c[SIZE], d[SIZE];
    #pragma omp parallel sections num_threads(2)
    {
        #pragma omp section
        {
            int tid = omp_get_thread_num();
            printf("Addition section executed by thread = %d\n", tid);
            for(int i=0; i<SIZE; i++) {
                c[i] = a[i] + b[i];
                printf("c[%d] = %d\n", i, c[i]);
            }
        }
        #pragma omp section
        {
            int tid = omp_get_thread_num();
            printf("Multiplication section executed by thread = %d\n", tid);
            for(int i=0; i<SIZE; i++) {
                d[i] = a[i] * b[i];
                printf("d[%d] = %d\n", i, d[i]);
            }
        }
    }
    return 0;
}



5
%%writefile openmp_mul.c

#include <stdio.h>
#include <omp.h>
#include <stdlib.h>

#define NRA 62
#define NCA 15
#define NCB 7

int main(int argc, char* argv[]){
    int tid, nthreads, i, j, k, chunk;
    double a[NRA][NCA], b[NCA][NCB], c[NRA][NCB];
    chunk = 10;
    #pragma omp parallel shared(a,b,c,nthreads,chunk) private(tid, i, j, k)
    tid = omp_get_thread_num();
    if (tid == 0)
    {
        nthreads = omp_get_num_threads();
        printf("Starting matrix multiplication example with %d threads\n", nthreads);
        printf("Initializing matrices...\n");
    }
    #pragma omp for schedule(static, chunk)
    for (i=0; i<NRA; i++)
        for (j=0; j<NCA; j++)
            a[i][j]= i+j;
    #pragma omp for schedule(static, chunk)
    for (i=0; i<NCA; i++)
        for (j=0; j<NCB; j++)
            b[i][j]= i*j;
    #pragma omp for schedule(static, chunk)
    for (i=0; i<NRA; i++)
        for (j=0; j<NCB; j++)
            c[i][j]= 0;
    printf("Thread %d starting matrix multiplication\n", tid);
    #pragma omp for schedule(static, chunk)
    for(i=0; i<NRA; i++){
        printf("Thread %d did row = %d\n", tid, i);
        for(j=0; j<NCB; j++){
            for(k=0; k<NCA; k++){
                c[i][j] += a[i][k]*b[k][j];
            }
        }
    }
    printf("Thread %d done. Result matrix:\n", tid);
    for(i=0; i<NRA; i++){
        for(j=0; j<NCB; j++){
            printf("%6.2f", c[i][j]);
        }
        printf("\n");
    }
    return 0;
}